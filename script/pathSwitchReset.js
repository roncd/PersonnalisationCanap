/* â”€â”€â”€ globalPathCleaner.js â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
   Ã€ charger AVANT tous les scripts dâ€™Ã©tape.
-------------------------------------------------------------------*/

document.addEventListener('DOMContentLoaded', () => {
  const currentStep = document.body.getAttribute('data-current-step') || '';
  const userId      = document.body.getAttribute('data-user-id');
  if (!userId || !currentStep) return;

  /* Chemin (Â«Â boisÂ Â» ou Â«Â tissuÂ Â») dÃ©tectÃ© dans lâ€™URL/slug */
  const currentPath = currentStep.includes('tissu') ? 'tissu'
                   : currentStep.includes('bois')  ? 'bois'
                   : null;
  if (!currentPath) return;                              // inert si step atypique

  /* Dernier chemin utilisÃ© par ce user dans la session */
  const lastPathKey = `lastPath_${userId}`;
  const lastPath    = sessionStorage.getItem(lastPathKey);

  /* Si on vient de changer de chemin â†’ on rÃ©initialise */
  if (lastPath && lastPath !== currentPath) {
    const wordOpposite   = currentPath === 'tissu' ? 'bois'  : 'tissu';
    const suffixOpposite = `-${wordOpposite}`;

    /* 1. EnlÃ¨ve .selected partout (visuel) */
    document.querySelectorAll('.selected').forEach(el =>
      el.classList.remove('selected')
    );

    /* 2. allSelectedOptions_<user> â†’ garde les entrÃ©es du chemin courant */
    const allKey = `allSelectedOptions_${userId}`;
    const kept   = (JSON.parse(sessionStorage.getItem(allKey) || '[]'))
                     .filter(opt => !opt.id.includes(suffixOpposite));
    sessionStorage.setItem(allKey, JSON.stringify(kept));

    /* 3. selectedOptions_<user> (accoudoirs, etc.) â†’ reset complet */
    sessionStorage.removeItem(`selectedOptions_${userId}`);

    /* 4. ClÃ©s gÃ©nÃ©riques en localStorage (dÃ©coration, etc.) */
    const genericKeysToClear = [
      'selectedDecoration',
      'selectedAccoudoir',
      'selectedMousse',     
    ];
    genericKeysToClear.forEach(k => localStorage.removeItem(k));

    /* 5. ClÃ©s localStorage contenant lâ€™autre chemin */
    Object.keys(localStorage).forEach(k => {
      if (k.toLowerCase().includes(wordOpposite)) localStorage.removeItem(k);
    });

    console.log(`ðŸ§¹ Changement ${lastPath} â†’ ${currentPath} : nettoyage effectuÃ©`);
  }

  /* Met Ã  jour la mÃ©moire du chemin courant */
  sessionStorage.setItem(lastPathKey, currentPath);
});
